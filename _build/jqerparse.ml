type token =
  | COLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULUS
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | EOL
  | DOT
  | DEF
  | BEGIN
  | END
  | NEWLINE
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | TUPLE
  | NONE
  | STRING
  | PRINT
  | SEMI
  | INT_LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | STRING_LITERAL of (string)
  | TUPLE_LITERAL of (int * int)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "jqerparse.mly"
open! Ast
# 55 "jqerparse.ml"
let yytransl_const = [|
  257 (* COLON *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LSQUARE *);
  263 (* RSQUARE *);
  264 (* COMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* MODULUS *);
  270 (* ASSIGN *);
  271 (* NOT *);
  272 (* EQ *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* LEQ *);
  276 (* GT *);
  277 (* GEQ *);
  278 (* AND *);
  279 (* OR *);
  280 (* EOL *);
  281 (* DOT *);
  282 (* DEF *);
  283 (* BEGIN *);
  284 (* END *);
  285 (* NEWLINE *);
  286 (* RETURN *);
  287 (* IF *);
  288 (* ELSE *);
  289 (* FOR *);
  290 (* WHILE *);
  291 (* INT *);
  292 (* BOOL *);
  293 (* TUPLE *);
  294 (* NONE *);
  295 (* STRING *);
  296 (* PRINT *);
  297 (* SEMI *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  298 (* INT_LITERAL *);
  299 (* BLIT *);
  300 (* ID *);
  301 (* STRING_LITERAL *);
  302 (* TUPLE_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\007\000\007\000\
\003\000\008\000\008\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\013\000\013\000\014\000\
\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\012\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\000\000\002\000\
\003\000\000\000\002\000\002\000\003\000\005\000\005\000\007\000\
\009\000\005\000\005\000\000\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\003\000\004\000\003\000\003\000\005\000\000\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\058\000\000\000\010\000\011\000\014\000\012\000\
\013\000\001\000\003\000\004\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\009\000\015\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\000\000\000\000\030\000\031\000\000\000\032\000\019\000\
\000\000\000\000\000\000\047\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\018\000\051\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\000\000\036\000\037\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\022\000\053\000\
\000\000\000\000\026\000\027\000\000\000\000\000\000\000\024\000\
\000\000\000\000\025\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\013\000\020\000\030\000\033\000\
\021\000\048\000\049\000\055\000\086\000\087\000"

let yysindex = "\007\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\241\254\224\254\242\254\018\255\
\000\000\089\255\228\254\044\255\013\255\000\000\047\255\089\255\
\022\255\009\255\032\255\000\000\000\000\089\255\000\000\016\255\
\048\255\035\255\142\255\142\255\142\255\000\000\142\255\059\255\
\064\255\065\255\068\255\000\000\000\000\043\255\000\000\000\000\
\218\000\056\255\203\000\000\000\000\000\061\001\045\255\142\255\
\142\255\142\255\142\255\142\255\142\255\033\255\142\255\142\255\
\142\255\142\255\142\255\142\255\142\255\142\255\142\255\142\255\
\142\255\142\255\142\255\000\000\000\000\000\000\142\255\000\000\
\239\000\046\255\004\001\025\001\061\001\081\255\091\255\061\001\
\000\000\083\255\083\255\000\000\000\000\000\000\244\255\244\255\
\179\255\179\255\179\255\179\255\090\001\076\001\070\255\046\001\
\164\255\142\255\164\255\060\255\000\000\142\255\000\000\000\000\
\073\255\177\000\000\000\000\000\061\001\164\255\142\255\000\000\
\103\255\164\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\108\255\000\000\000\000\115\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\106\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\080\255\000\000\
\000\000\000\000\000\000\000\000\000\000\202\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\015\255\000\000\000\000\
\078\255\000\000\000\000\117\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\255\000\000\119\255\014\255\
\000\000\229\255\002\000\000\000\000\000\000\000\141\000\151\000\
\038\000\065\000\092\000\119\000\143\000\094\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\128\255\000\000\000\000\000\000\006\255\000\000\129\255\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\101\000\000\000\245\255\000\000\000\000\056\000\
\000\000\203\255\223\255\199\255\000\000\000\000"

let yytablesize = 623
let yytable = "\082\000\
\010\000\051\000\052\000\053\000\056\000\054\000\019\000\001\000\
\057\000\056\000\014\000\016\000\026\000\057\000\017\000\022\000\
\049\000\029\000\032\000\018\000\024\000\049\000\081\000\054\000\
\083\000\084\000\085\000\088\000\015\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\049\000\029\000\060\000\104\000\023\000\025\000\
\034\000\035\000\027\000\113\000\028\000\115\000\049\000\029\000\
\061\000\036\000\029\000\015\000\056\000\121\000\037\000\050\000\
\120\000\057\000\058\000\062\000\123\000\059\000\034\000\035\000\
\114\000\080\000\089\000\038\000\117\000\039\000\040\000\036\000\
\041\000\042\000\077\000\109\000\037\000\054\000\106\000\043\000\
\116\000\044\000\045\000\046\000\047\000\065\000\066\000\067\000\
\046\000\111\000\110\000\039\000\040\000\046\000\041\000\042\000\
\118\000\122\000\018\000\018\000\028\000\043\000\006\000\044\000\
\045\000\046\000\047\000\018\000\046\000\007\000\028\000\054\000\
\018\000\055\000\046\000\005\000\006\000\007\000\008\000\009\000\
\023\000\023\000\031\000\028\000\103\000\018\000\046\000\018\000\
\018\000\023\000\018\000\018\000\000\000\000\000\023\000\035\000\
\000\000\018\000\000\000\018\000\018\000\018\000\018\000\036\000\
\000\000\000\000\000\000\023\000\037\000\023\000\023\000\000\000\
\023\000\023\000\000\000\000\000\034\000\035\000\000\000\023\000\
\000\000\023\000\023\000\023\000\023\000\036\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\000\000\000\000\044\000\
\045\000\046\000\047\000\063\000\064\000\065\000\066\000\067\000\
\000\000\039\000\040\000\000\000\041\000\042\000\000\000\000\000\
\000\000\000\000\000\000\043\000\033\000\044\000\045\000\046\000\
\047\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\000\000\000\000\000\000\000\000\000\000\033\000\034\000\
\000\000\000\000\000\000\000\000\034\000\034\000\034\000\000\000\
\000\000\000\000\033\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\063\000\064\000\065\000\066\000\
\067\000\034\000\000\000\000\000\035\000\070\000\071\000\072\000\
\073\000\035\000\035\000\035\000\000\000\034\000\000\000\000\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\000\000\005\000\006\000\007\000\008\000\009\000\
\041\000\000\000\035\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\000\000\000\000\000\000\
\000\000\000\000\041\000\042\000\000\000\000\000\000\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\000\000\000\000\042\000\043\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\000\000\000\000\000\000\000\000\000\000\
\043\000\044\000\000\000\000\000\000\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\000\000\039\000\
\000\000\045\000\000\000\044\000\039\000\000\000\045\000\000\000\
\000\000\040\000\000\000\000\000\039\000\039\000\040\000\044\000\
\000\000\000\000\039\000\039\000\045\000\045\000\040\000\040\000\
\000\000\039\000\000\000\045\000\040\000\040\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\039\000\000\000\045\000\
\000\000\063\000\064\000\065\000\066\000\067\000\000\000\040\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\000\000\000\000\000\000\000\000\000\000\078\000\000\000\000\000\
\000\000\000\000\079\000\063\000\064\000\065\000\066\000\067\000\
\000\000\119\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\063\000\064\000\065\000\066\000\067\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\105\000\000\000\000\000\000\000\000\000\076\000\063\000\
\064\000\065\000\066\000\067\000\000\000\000\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\107\000\000\000\
\000\000\000\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\108\000\000\000\000\000\000\000\000\000\
\000\000\063\000\064\000\065\000\066\000\067\000\000\000\000\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\112\000\000\000\000\000\000\000\000\000\000\000\063\000\064\000\
\065\000\066\000\067\000\000\000\000\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\063\000\064\000\065\000\066\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\063\000\064\000\065\000\066\000\067\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000"

let yycheck = "\057\000\
\000\000\035\000\036\000\037\000\003\001\039\000\018\000\001\000\
\003\001\008\001\026\001\044\001\024\000\008\001\029\001\044\001\
\003\001\003\001\030\000\002\001\008\001\008\001\056\000\057\000\
\058\000\059\000\060\000\061\000\044\001\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\029\001\029\001\002\001\079\000\003\001\001\001\
\001\001\002\001\029\001\105\000\044\001\107\000\041\001\041\001\
\014\001\010\001\027\001\044\001\002\001\119\000\015\001\029\001\
\118\000\002\001\002\001\025\001\122\000\002\001\001\001\002\001\
\106\000\029\001\042\001\028\001\110\000\030\001\031\001\010\001\
\033\001\034\001\027\001\003\001\015\001\119\000\041\001\040\001\
\029\001\042\001\043\001\044\001\045\001\011\001\012\001\013\001\
\003\001\028\001\008\001\030\001\031\001\008\001\033\001\034\001\
\032\001\003\001\001\001\002\001\029\001\040\001\003\001\042\001\
\043\001\044\001\045\001\010\001\023\001\003\001\041\001\003\001\
\015\001\003\001\029\001\035\001\036\001\037\001\038\001\039\001\
\001\001\002\001\030\000\003\001\077\000\028\001\041\001\030\001\
\031\001\010\001\033\001\034\001\255\255\255\255\015\001\002\001\
\255\255\040\001\255\255\042\001\043\001\044\001\045\001\010\001\
\255\255\255\255\255\255\028\001\015\001\030\001\031\001\255\255\
\033\001\034\001\255\255\255\255\001\001\002\001\255\255\040\001\
\255\255\042\001\043\001\044\001\045\001\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\042\001\
\043\001\044\001\045\001\009\001\010\001\011\001\012\001\013\001\
\255\255\030\001\031\001\255\255\033\001\034\001\255\255\255\255\
\255\255\255\255\255\255\040\001\003\001\042\001\043\001\044\001\
\045\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\029\001\003\001\
\255\255\255\255\255\255\255\255\008\001\009\001\010\001\255\255\
\255\255\255\255\041\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\009\001\010\001\011\001\012\001\
\013\001\029\001\255\255\255\255\003\001\018\001\019\001\020\001\
\021\001\008\001\009\001\010\001\255\255\041\001\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\029\001\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\003\001\255\255\041\001\255\255\255\255\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\029\001\003\001\255\255\255\255\255\255\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\041\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\003\001\255\255\
\255\255\255\255\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\041\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\029\001\003\001\255\255\255\255\255\255\255\255\008\001\255\255\
\255\255\255\255\255\255\255\255\041\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\003\001\
\255\255\003\001\255\255\029\001\008\001\255\255\008\001\255\255\
\255\255\003\001\255\255\255\255\016\001\017\001\008\001\041\001\
\255\255\255\255\022\001\023\001\022\001\023\001\016\001\017\001\
\255\255\029\001\255\255\029\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\255\255\041\001\255\255\041\001\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\041\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\003\001\255\255\255\255\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\041\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\003\001\255\255\255\255\255\255\255\255\029\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\003\001\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\003\001\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001"

let yynames_const = "\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULUS\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  EOL\000\
  DOT\000\
  DEF\000\
  BEGIN\000\
  END\000\
  NEWLINE\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  TUPLE\000\
  NONE\000\
  STRING\000\
  PRINT\000\
  SEMI\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LITERAL\000\
  BLIT\000\
  ID\000\
  STRING_LITERAL\000\
  TUPLE_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 33 "jqerparse.mly"
            ( _1 )
# 412 "jqerparse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "jqerparse.mly"
                 ( ([], [])               )
# 418 "jqerparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "jqerparse.mly"
               ( ((_2 :: fst _1), snd _1) )
# 426 "jqerparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "jqerparse.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 434 "jqerparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 11 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : 'formals_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 42 "jqerparse.mly"
     ( { typ = _1;
	 fname = _3;
	 formals = List.rev _5;
	 locals = List.rev _10;
	 body = List.rev _11 } )
# 449 "jqerparse.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "jqerparse.mly"
                  ( [] )
# 455 "jqerparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 50 "jqerparse.mly"
                  ( _1 )
# 462 "jqerparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "jqerparse.mly"
                             ( [(_1,_2)]     )
# 470 "jqerparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "jqerparse.mly"
                             ( (_3,_4) :: _1 )
# 479 "jqerparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "jqerparse.mly"
          ( Int   )
# 485 "jqerparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "jqerparse.mly"
          ( Bool  )
# 491 "jqerparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "jqerparse.mly"
          ( None  )
# 497 "jqerparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "jqerparse.mly"
           ( String )
# 503 "jqerparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "jqerparse.mly"
          ( Tuple )
# 509 "jqerparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "jqerparse.mly"
                     ( [] )
# 515 "jqerparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 65 "jqerparse.mly"
                     ( _2 :: _1 )
# 523 "jqerparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 68 "jqerparse.mly"
                  ( (_1, _2) )
# 531 "jqerparse.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "jqerparse.mly"
                   ( [] )
# 537 "jqerparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 72 "jqerparse.mly"
                   ( _2 :: _1 )
# 545 "jqerparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "jqerparse.mly"
                                              ( Expr _1               )
# 552 "jqerparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 76 "jqerparse.mly"
                                              ( Return _2             )
# 559 "jqerparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 77 "jqerparse.mly"
                                                          ( Block(List.rev _4)    )
# 566 "jqerparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 78 "jqerparse.mly"
                                            ( If(_3, _5, Block([])) )
# 574 "jqerparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "jqerparse.mly"
                                            ( If(_3, _5, _7)        )
# 583 "jqerparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "jqerparse.mly"
                                            ( For(_3, _5, _7, _9)   )
# 593 "jqerparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "jqerparse.mly"
                                            ( While(_3, _5)         )
# 601 "jqerparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 83 "jqerparse.mly"
                                     ( Print(_3) )
# 608 "jqerparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "jqerparse.mly"
                  ( Noexpr )
# 614 "jqerparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "jqerparse.mly"
                  ( _1 )
# 621 "jqerparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "jqerparse.mly"
                         ( IntLiteral(_1)            )
# 628 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 91 "jqerparse.mly"
                     ( BoolLit(_1)            )
# 635 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "jqerparse.mly"
                     ( StringLit(_1) )
# 642 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "jqerparse.mly"
                     ( Id(_1)                 )
# 649 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "jqerparse.mly"
                     ( Binop(_1, Add,   _3)   )
# 657 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "jqerparse.mly"
                     ( Binop(_1, Sub,   _3)   )
# 665 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "jqerparse.mly"
                     ( Binop(_1, Mult,  _3)   )
# 673 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "jqerparse.mly"
                     ( Binop(_1, Div,   _3)   )
# 681 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "jqerparse.mly"
                      ( Binop(_1, Mod,   _3)   )
# 689 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "jqerparse.mly"
                     ( Binop(_1, Equal, _3)   )
# 697 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "jqerparse.mly"
                     ( Binop(_1, Neq,   _3)   )
# 705 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "jqerparse.mly"
                     ( Binop(_1, Less,  _3)   )
# 713 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "jqerparse.mly"
                     ( Binop(_1, Leq,   _3)   )
# 721 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "jqerparse.mly"
                     ( Binop(_1, Greater, _3) )
# 729 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "jqerparse.mly"
                     ( Binop(_1, Geq,   _3)   )
# 737 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "jqerparse.mly"
                     ( Binop(_1, And,   _3)   )
# 745 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "jqerparse.mly"
                     ( Binop(_1, Or,    _3)   )
# 753 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "jqerparse.mly"
                         ( Unop(Neg, _2)      )
# 760 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "jqerparse.mly"
                     ( Unop(Not, _2)          )
# 767 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "jqerparse.mly"
                     ( Assign(_1, _3)         )
# 775 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 110 "jqerparse.mly"
                              ( Call(_1, _3)  )
# 783 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 111 "jqerparse.mly"
                       ( _2                   )
# 790 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 112 "jqerparse.mly"
                        ( TupleAccess(_1, _3))
# 798 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 113 "jqerparse.mly"
                                  ( TupleLiteral(_2,_4) )
# 806 "jqerparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "jqerparse.mly"
                  ( [] )
# 812 "jqerparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 117 "jqerparse.mly"
               ( List.rev _1 )
# 819 "jqerparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "jqerparse.mly"
                            ( [_1] )
# 826 "jqerparse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "jqerparse.mly"
                         ( _3 :: _1 )
# 834 "jqerparse.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
